// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/proto/wormhole.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WormholeClient is the client API for Wormhole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WormholeClient interface {
	// node -> wormhole
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	PenetrateTask(ctx context.Context, opts ...grpc.CallOption) (Wormhole_PenetrateTaskClient, error)
	Penetrate(ctx context.Context, opts ...grpc.CallOption) (Wormhole_PenetrateClient, error)
	// user -> wormhole
	ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	DelTask(ctx context.Context, in *DelTaskRequest, opts ...grpc.CallOption) (*DelTaskResponse, error)
}

type wormholeClient struct {
	cc grpc.ClientConnInterface
}

func NewWormholeClient(cc grpc.ClientConnInterface) WormholeClient {
	return &wormholeClient{cc}
}

func (c *wormholeClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, "/proto.Wormhole/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) PenetrateTask(ctx context.Context, opts ...grpc.CallOption) (Wormhole_PenetrateTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wormhole_ServiceDesc.Streams[0], "/proto.Wormhole/PenetrateTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &wormholePenetrateTaskClient{stream}
	return x, nil
}

type Wormhole_PenetrateTaskClient interface {
	Send(*PenetrateTaskRequest) error
	Recv() (*PenetrateTaskResponse, error)
	grpc.ClientStream
}

type wormholePenetrateTaskClient struct {
	grpc.ClientStream
}

func (x *wormholePenetrateTaskClient) Send(m *PenetrateTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wormholePenetrateTaskClient) Recv() (*PenetrateTaskResponse, error) {
	m := new(PenetrateTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wormholeClient) Penetrate(ctx context.Context, opts ...grpc.CallOption) (Wormhole_PenetrateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wormhole_ServiceDesc.Streams[1], "/proto.Wormhole/Penetrate", opts...)
	if err != nil {
		return nil, err
	}
	x := &wormholePenetrateClient{stream}
	return x, nil
}

type Wormhole_PenetrateClient interface {
	Send(*PenetrateRequest) error
	Recv() (*PenetrateResponse, error)
	grpc.ClientStream
}

type wormholePenetrateClient struct {
	grpc.ClientStream
}

func (x *wormholePenetrateClient) Send(m *PenetrateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wormholePenetrateClient) Recv() (*PenetrateResponse, error) {
	m := new(PenetrateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wormholeClient) ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := c.cc.Invoke(ctx, "/proto.Wormhole/ListNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Wormhole/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Wormhole/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) DelTask(ctx context.Context, in *DelTaskRequest, opts ...grpc.CallOption) (*DelTaskResponse, error) {
	out := new(DelTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Wormhole/DelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WormholeServer is the server API for Wormhole service.
// All implementations must embed UnimplementedWormholeServer
// for forward compatibility
type WormholeServer interface {
	// node -> wormhole
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	PenetrateTask(Wormhole_PenetrateTaskServer) error
	Penetrate(Wormhole_PenetrateServer) error
	// user -> wormhole
	ListNode(context.Context, *ListNodeRequest) (*ListNodeResponse, error)
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	DelTask(context.Context, *DelTaskRequest) (*DelTaskResponse, error)
	mustEmbedUnimplementedWormholeServer()
}

// UnimplementedWormholeServer must be embedded to have forward compatible implementations.
type UnimplementedWormholeServer struct {
}

func (UnimplementedWormholeServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedWormholeServer) PenetrateTask(Wormhole_PenetrateTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method PenetrateTask not implemented")
}
func (UnimplementedWormholeServer) Penetrate(Wormhole_PenetrateServer) error {
	return status.Errorf(codes.Unimplemented, "method Penetrate not implemented")
}
func (UnimplementedWormholeServer) ListNode(context.Context, *ListNodeRequest) (*ListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedWormholeServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedWormholeServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedWormholeServer) DelTask(context.Context, *DelTaskRequest) (*DelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTask not implemented")
}
func (UnimplementedWormholeServer) mustEmbedUnimplementedWormholeServer() {}

// UnsafeWormholeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WormholeServer will
// result in compilation errors.
type UnsafeWormholeServer interface {
	mustEmbedUnimplementedWormholeServer()
}

func RegisterWormholeServer(s grpc.ServiceRegistrar, srv WormholeServer) {
	s.RegisterService(&Wormhole_ServiceDesc, srv)
}

func _Wormhole_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Wormhole/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_PenetrateTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WormholeServer).PenetrateTask(&wormholePenetrateTaskServer{stream})
}

type Wormhole_PenetrateTaskServer interface {
	Send(*PenetrateTaskResponse) error
	Recv() (*PenetrateTaskRequest, error)
	grpc.ServerStream
}

type wormholePenetrateTaskServer struct {
	grpc.ServerStream
}

func (x *wormholePenetrateTaskServer) Send(m *PenetrateTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wormholePenetrateTaskServer) Recv() (*PenetrateTaskRequest, error) {
	m := new(PenetrateTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wormhole_Penetrate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WormholeServer).Penetrate(&wormholePenetrateServer{stream})
}

type Wormhole_PenetrateServer interface {
	Send(*PenetrateResponse) error
	Recv() (*PenetrateRequest, error)
	grpc.ServerStream
}

type wormholePenetrateServer struct {
	grpc.ServerStream
}

func (x *wormholePenetrateServer) Send(m *PenetrateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wormholePenetrateServer) Recv() (*PenetrateRequest, error) {
	m := new(PenetrateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wormhole_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Wormhole/ListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).ListNode(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Wormhole/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Wormhole/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_DelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).DelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Wormhole/DelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).DelTask(ctx, req.(*DelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wormhole_ServiceDesc is the grpc.ServiceDesc for Wormhole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wormhole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Wormhole",
	HandlerType: (*WormholeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Wormhole_RegisterNode_Handler,
		},
		{
			MethodName: "ListNode",
			Handler:    _Wormhole_ListNode_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _Wormhole_AddTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Wormhole_ListTask_Handler,
		},
		{
			MethodName: "DelTask",
			Handler:    _Wormhole_DelTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PenetrateTask",
			Handler:       _Wormhole_PenetrateTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Penetrate",
			Handler:       _Wormhole_Penetrate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/wormhole.proto",
}
